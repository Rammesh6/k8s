LEC-51 DEVOPS TECHNICAL GUFTGU NOTES
====================
 Install Docker
$  sudo apt update && apt -y install docker.io

 Install kubectl
$  curl -LO https://storage.googleapis.com/kubern... -s https://storage.googleapis.com/kubern... &&   chmod +x ./kubectl && sudo mv ./kubectl /usr/local/bin/kubectl

 Install Minikube
$  curl -Lo minikube https://storage.googleapis.com/miniku... && chmod +x minikube && sudo mv minikube /usr/local/bin/

 Start Minikube
$  apt install conntrack
$  minikube start --vm-driver=none
$  minikube status
=================================
KUBERNETES NETWORKING
=================================
Create pod with 2 container in it & follow below to make communication b/w two containers in the pod 

vi pod1.yml

kind: Pod
apiVersion: v1
metadata:
  name: testpod
spec:
  containers:
    - name: c00
      image: ubuntu
      command: ["/bin/bash", "-c", "while true; do echo Hello-Bhupinder; sleep 5 ; done"]
    - name: c01
      image: httpd
      ports:
       - containerPort: 80
	   
Save & exit

kubectl apply -f pod1.yml

kubectl get pods

lets go into the container and communicate with other container 

kubectl exec testpod -it -c coo --bin/bash (you will enter into the container c00 by this CMD)

# to communicate with other container we must install curl package

apt update && apt install curl 

# now lets communicate with other container

curl localhost:80

o/p we will get --- it works

now type exit to come out of the container & delete pod file

kubectl	delete -f pod1.yml

------- now make communication b/w two pods in a node-------

vi pod2.yml


kind: Pod
apiVersion: v1
metadata:
  name: testpod1
spec:
  containers:
    - name: c01
      image: nginx
      command: ["/bin/bash", "-c", "while true; do echo Hello-Bhupinder; sleep 5 ; done"]
      ports:
       - containerPort: 80
	   
Save & exit

kubectl apply -f pod2.yml

# now create one more pod 

Vi pod3.yml

kind: Pod
apiVersion: v1
metadata:
  name: testpod4
spec:
  containers:
    - name: c01
      image: httpd
      ports:
       - containerPort: 80
	   
Save & exit

kubectl apply -f pod3.yml

kubectl get pods

kubectl get pods -o wide

now copy the pod ip address and paste in the below command to communicate with the pod

curl <pod ip address>:80

o/p will be appear.... 

-----similarly check the other---- 

kubectl get pods -o wide

now copy the pod ip address and paste in the below command to communicate with the pod

curl <pod ip address>:80

o/p will be appear.... 


-------  Now lets use the Cluster IP Service -----
Create new file

vi deployhttpd.yml

kind: Deployment
apiVersion: apps/v1
metadata:
   name: mydeployments
spec:
   replicas: 1
   selector:      # tells the controller which pods to watch/belong to
    matchLabels:
     name: deployment
   template:
     metadata:
       name: testpod1
       labels:
         name: deployment
     spec:
      containers:
        - name: c00
          image: httpd
          ports:
          - containerPort: 80
		  
Save & Exit

kubectl apply -f deployhttpd.yml

kubectl get pods

kubectl get pods -o wide

curl <pod ip>:80
o/p --- it works

lets create one sevice

vi service.yml


kind: Service                             # Defines to create Service type Object
apiVersion: v1
metadata:
  name: demoservice
spec:
  ports:
    - port: 80                               # Containers port exposed
      targetPort: 80                     # Pods port
  selector:
    name: deployment                    # Apply this service to any pods which has the specific label
  type: ClusterIP                       # Specifies the service type i.e ClusterIP or NodePort


Save & Exit

kubectl apply -f service.yml

kubectl get svc (now you will get the cluster IP copy it & paste in below command)

curl <clusterIP>:80

kubectl get pods

# Now delete the pod

kubectl delete pod <podname>

kubectl get pods

now also you can access the new pod which have got different ip through
 the above cluster IP/static IP which we got earlier
 
 now delelte all files and sevices
 
 kubectl get pods 
 
 kubectl delete -f service.yml   and so on..

------- Now Lets try NodePort----------

kubectl get pods

ls

vi deployhttpd.yml


kind: Deployment
apiVersion: apps/v1
metadata:
   name: mydeployments
spec:
   replicas: 1
   selector:      # tells the controller which pods to watch/belong to
    matchLabels:
     name: deployment
   template:
     metadata:
       name: testpod1
       labels:
         name: deployment
     spec:
      containers:
        - name: c00
          image: httpd
          ports:
          - containerPort: 80
		  
Save & Exit

kubectl applt -f deployhttpd.yml

#now create service file

vi svc.yml


kind: Service                             # Defines to create Service type Object
apiVersion: v1
metadata:
  name: demoservice
spec:
  ports:
    - port: 80                               # Containers port exposed
      targetPort: 80                     # Pods port
  selector:
    name: deployment                    # Apply this service to any pods which has the specific label
  type: NodePort                       # Specifies the service type i.e ClusterIP or NodePort


Save & Exit

kubectl apply -f svc.yml

kubectl get svc 

kubectl describe svc demoservice

#Now copy the public DNS IP in AWS console and paste it along with nodeport ip 
separate with :

now you can delete svc. yml file

kubectl delete -f svc.yml

---------- VOLUMES---------

vi emptydir.yml


apiVersion: v1
kind: Pod
metadata:
  name: myvolemptydir
spec:
  containers:
  - name: c1
    image: centos
    command: ["/bin/bash", "-c", "sleep 15000"]
    volumeMounts:                                    # Mount definition inside the container
      - name: xchange
        mountPath: "/tmp/xchange"          
  - name: c2
    image: centos
    command: ["/bin/bash", "-c", "sleep 10000"]
    volumeMounts:
      - name: xchange
        mountPath: "/tmp/data"
  volumes:                                                   
  - name: xchange
    emptyDir: {}
	
Save & Exit

kubectl apply -f emptydir.yml

kubectl get pods

now go into the container

kubectl exec myvolemptydir -c c1 -it -- /bin/bash

now you are in the container

cd /tmp
ls
cd /xchange

vi abc.yml

hiufguighfuighfjhvsfhfj

save & exit

exit

kubectl exec myvolemptydir -c c2 -it -- /bin/bash

now you are in container 2

cd /tmp
ls
cd data

vi abc.yml

hi ramesh

save & exit

exit

now again go into the container 1

kubectl exec myvolemptydir -c c1 -it -- /bin/bash

exit

kubectl delete -f emptydir.yml

--------HOST PATH ----------

# the volume in the pod is mapped with the hostPath so that you can access the data 
without going into the port.

vi hostpath.yml


apiVersion: v1
kind: Pod
metadata:
  name: myvolhostpath
spec:
  containers:
  - image: centos
    name: testc
    command: ["/bin/bash", "-c", "sleep 15000"]
    volumeMounts:
    - mountPath: /tmp/hostpath
      name: testvolume
  volumes:
  - name: testvolume
    hostPath:
      path: /tmp/data 
	  
save & exit

kubectl apply -f hostpath.yml

kubectl get pods

ls /tmp

cd data

kubectl get pods

kubectl exec <pod name> --ls /tmp/data (1:58)

now you are in the pod

echo "I love india" >myfile (creates file with a message i live india)

 now lests go to host path

kubectl exec myvolhostpath -- ls /tmp/hostpath

cat myfile

now lets go into the container and check for the file


kubectl exec myvolhostpath	-it -- bin/bash 

cd /tmp/hostpath

now create one more file here

echo " this is my second file" >myfile1

ls

exit

now lets check in the host machine that the file which we have created 
in the container is available or not.

ls

cat myfile1

----------------the End

 












 


$ kubectl get svc



ap
================

====================

$ kubectl get svc


===========================
volume labs
===========================





========================
HOST PATH
========================


